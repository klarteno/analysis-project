
    data RecordIndexing = FirstIndex
                        | SecondIndex

    data RecordName = String                    

    data ArrayName = String    

    data Programs = Declarations
                    |Stmt

    data Assign =  LiteralExpr AssignmentExpr
                    | RecordName Tuple AssignmentExpr AssignmentExpr                

    data Stmt = Assign
                | Seq [Stmt]
                | If BoolExpr Stmt
                | If BoolExpr Stmt Else
                | While BoolExpr Stmt
                | Read LiteralExpr
                | Write AssignmentExpr
                | Skip
                deriving (Show)

    data LiteralExpr =  String
                    | Array ArrayName AssignmentExpr
                    | Record RecordName RecordIndexing
                    deriving (Show)
       
    data FirstIndex = AssignmentExpr

    data SecondIndex = AssignmentExpr
 
    data AssignmentExpr = IntLit Integer
                   | Right LiteralExpr
                   | ArithBinary ArithOp ArithExpr ArithExpr
                   deriving (Show)
    
    data BoolExpr = BoolLit Bool
                  | RelBinary RelOp AssignmentExpr AssignmentExpr
                  | BoolBinary BoolOp BoolExpr BoolExpr
                  | Not BoolExpr
                  deriving (Show)
    
    data Declarations = VarIntegerDecl String
                  | ArrayDecl ArrayName Integer Size
                  | RecordDecl RecordName FirstIndex SecondIndex
                  | Empty
                  | Seq [Declarations]
                  deriving (Show)

    data ArithOp = Add
                 | Subtract
                 | Multiply
                 | Divide
                 | Modulus
                 deriving (Show)
    
    data RelOp = Greater
                 | Less
                 | LessOrEqual
                 | GreaterOrEqual
                 | EqualRel
                 | DifferentRel
                 deriving (Show)

    data BoolOp = And
                | Or
                deriving (Show)
    
    
    -- there is little separation between lexer and parser here
    -- the operations of lexer and parser is interleaved
    -- a parsing function at the very end calls lexing functions
    -- you can see it through the usage of the `lexeme` function
    -- by the `reserved` and `identifier` parser
    
    -- the parser can always do the job of the lexer
    -- however usually, the 2 are separated
    -- so that the lexer can reduce the amount of information noise
    -- the parser has to deal with
    
    -- using Haskell megaparsec means you get flexibility
    -- and with functional abstraction, the parsers
    -- are not dealing with the low level noise
    -- the "lexer" are just lower level parsers
    
    -- so this is parser abstraction!
    -- reduces the amount of things you need to deal with
    
    -- also this can do single pass parsing
    -- in terms of building up a symbol table
    -- this can also be done by layering the monad
    -- instead of just maintaining the state of the input stream
    -- we can also maintain the state of a symbol table
    
    type Parser = Parsec.Parsec Void String
    
    -- here we have the "low level" lexical parsers
    
    space :: Parser ()
    space = Lexer.space CharParser.space1 lineComment blockComment
      where
        lineComment = Lexer.skipLineComment "//"
        blockComment = Lexer.skipBlockComment "/*" "*/"
    
    symbol :: String -> Parser String
    symbol = Lexer.symbol space
    
    lexeme :: Parser a -> Parser a
    lexeme = Lexer.lexeme space
    
    parens :: Parser a -> Parser a
    parens = Parsec.between (symbol "(") (symbol ")")
  
    curlyBraces :: Parser a -> Parser a
    curlyBraces = Parsec.between (symbol "{") (symbol "}")

    integer :: Parser Integer
    integer = lexeme Lexer.decimal
    
    semicolon :: Parser String
    semicolon = symbol ";"
    
    -- here we have the "mid level" parsers
    -- dealing with more "composite" syntax
    
    reserved :: String -> Parser ()
    reserved w =
      (lexeme . Parsec.try)
      (CharParser.string w *>
       Parsec.notFollowedBy CharParser.alphaNumChar)
    
    identifier :: Parser String
    identifier = (lexeme . Parsec.try) (p >>= check)
      where
        p = (:) <$> CharParser.letterChar <*> Parsec.many CharParser.alphaNumChar
        check x = if x `elem` reservedWords
                  then fail $ "keyword " ++ show x ++ " cannot be an identifier"
                  else return x
        reservedWords =
          [
            "if",
            "else",
            "while",
            "skip",
            "read",
            "write",
            "fst",
            "snd",
            "break",
            "int",
            "true",
            "false",
            "not",
            "and",
            "or"
          ]
    
    -- here we have the "high level" parsers
    -- doing double duty in doing "code generation"
    -- they are not just parsing strings/integers
    -- they are not parsing __into__ the abstract syntax tree
    
    stmt :: Parser Stmt
    stmt = f <$> Parsec.sepBy1 stmt' semicolon
      where
        f l = if length l == 1 then head l else Seq l
        stmt' = ifStmt <|>
                whileStmt <|>
                skipStmt <|>
                assignStmt <|>
                readStm <|>
                writeStm <|>
                parens stmt
    
    ifStmt :: Parser Stmt
    ifStmt = do
      reserved "if"
      condition <- parens boolExpr
      stmts1 <- curlyBraces stmt
      reserved "else"          -- optional parsing  
      stmts2 <- curlyBraces stmt  -- optional parsing  
      return (If condition stmts1 stmts2)
    
    whileStmt :: Parser Stmt
    whileStmt = do
      reserved "while"
      cond <- parens boolExpr
      stmts <- curlyBraces stmt
      return (While cond stmts)
    
    assignStmt :: Parser Stmt
    assignStmt = assignLiteral <|> assignRecord
        where
            assignLiteral =   do
                    var <- identifier
                    symbol ":="
                    expr <- assignmExpr
                    return (Assign var expr)
            assignRecord =   do
                        var <- identifier
                        symbol ":="
                       -- expr <- parens assignmExpr
                        firstIndex     <- fst expr
                        secondIndex    <- snd expr
                        return ( RecordDecl var firstIndex secondIndex)       

    skipStmt :: Parser Stmt
    skipStmt = Skip <$ reserved "skip"
    
    boolExpr :: Parser BoolExpr
    boolExpr = ExprParser.makeExprParser boolTerm boolOperators
    
    boolTerm :: Parser BoolExpr
    boolTerm = parens boolExpr <|>
               (BoolLit True <$ reserved "true") <|>
               (BoolLit False <$ reserved "false") <|>
               relExpr
    
    boolOperators :: [[ExprParser.Operator Parser BoolExpr]]
    boolOperators =
      [
        [ExprParser.Prefix (Not <$ reserved "not")],
        [
          ExprParser.InfixL (BoolBinary And <$ reserved "and"),
          ExprParser.InfixL (BoolBinary Or <$ reserved "or")
        ]
      ]
    
    arithExpr :: Parser ArithExpr
    arithExpr = ExprParser.makeExprParser arithTerm arithOperators
    
    arithTerm :: Parser ArithExpr
    arithTerm = parens arithExpr <|>
                Var <$> identifier <|>
                IntLit <$> integer
    
    arithOperators :: [[ExprParser.Operator Parser ArithExpr]]
    arithOperators =
      [
        [ExprParser.Prefix (Neg <$ symbol "-")],
        [
          ExprParser.InfixL (ArithBinary Multiply <$ symbol "*"),
          ExprParser.InfixL (ArithBinary Divide   <$ symbol "/")
        ],
        [
          ExprParser.InfixL (ArithBinary Add      <$ symbol "+"),
          ExprParser.InfixL (ArithBinary Subtract <$ symbol "-")
        ]
      ]
    
    relExpr :: Parser BoolExpr
    relExpr = do
      a1 <- arithExpr
      op <- relOperators
      a2 <- arithExpr
      return (RelBinary op a1 a2)
    
    relOperators :: Parser RelOp
    relOperators = (symbol ">" *> pure Greater) <|>
                   (symbol "<" *> pure Less) <|>
                   (symbol "<" *> pure LessOrEqual) <|>
                   (symbol "<" *> pure GreaterOrEqual) <|>
                   (symbol "<" *> pure EqualRel) <|>
                   (symbol "<" *> pure DifferentRel)
    -- here we have the parser entry point
    -- this will parse into our WHILE language AST
    
    whileParser :: Parser Stmt
    whileParser = Parsec.between space Parsec.eof stmt
    
    -- some tests of our parser
    
    main :: IO ()
    main = do
      ast1 <- Parsec.parseTest whileParser
        "a := 3"
      ast2 <- Parsec.parseTest whileParser
        "\
        \a:= 1;\
        \while (a < 4) \
        \  {a := 5;\
        \  if (4 < 3)\
        \   { skip}\
        \  else\
        \    {(b := 4)}}\
        \"
      print ast1
      print ast2
    
    {-
    Assign "a" (IntLit 3)
    Seq [Assign "a" (IntLit 1),While (RelBinary Less (Var "a") (IntLit 4)) (Seq [Assign "a" (IntLit 5),If (RelBinary Less (IntLit 4) (IntLit 3)) Skip (Assign "b" (IntLit 4))])]
    -}